{"version":3,"sources":["components/navigation.js","components/homeForumPosts.js","components/homeForumHeader.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","SubMenu","Menu","react_default","a","createElement","row","type","justify","col","span","className","style","color","icon","menu","defaultSelectedKeys","mode","theme","Item","key","title","HomeForumPosts","list","dataSource","renderItem","item","HomeForumHeader","Title","Typography","data","map","level","homeForumPosts","App","Header","Layout","Content","Footer","layout","affix","components_navigation","marginTop","components_homeForumHeader","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTA2CeA,EAvCI,SAACC,GAAU,IACpBC,EAAYC,IAAZD,QACR,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,KAAK,OAAOC,QAAQ,iBACvBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,KAAM,GACTP,EAAAC,EAAAC,cAAA,QAAMM,UAAU,SACdR,EAAAC,EAAAC,cAAA,MAAIO,MAAQ,CAAEC,MAAM,8BAClBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMP,KAAK,QAAQK,MAAQ,CAAEC,MAAM,+BADrC,gBAKJV,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,KAAM,GACTP,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,oBAAqB,CAAC,QAASC,KAAK,aAAaC,MAAM,OAAOP,UAAU,QAC5ER,EAAAC,EAAAC,cAACU,EAAA,EAAKI,KAAN,CACEC,IAAI,QACJjB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMP,KAAK,SAFb,QAIAJ,EAAAC,EAAAC,cAACJ,EAAD,CAASoB,MACPlB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMP,KAAK,SADb,WAIAJ,EAAAC,EAAAC,cAACU,EAAA,EAAKI,KAAN,CAAWC,IAAI,WAAf,WACAjB,EAAAC,EAAAC,cAACU,EAAA,EAAKI,KAAN,CAAWC,IAAI,WAAf,WACAjB,EAAAC,EAAAC,cAACU,EAAA,EAAKI,KAAN,CAAWC,IAAI,WAAf,WACAjB,EAAAC,EAAAC,cAACU,EAAA,EAAKI,KAAN,CAAWC,IAAI,WAAf,YAEFjB,EAAAC,EAAAC,cAACU,EAAA,EAAKI,KAAN,CAAWC,IAAI,SACfjB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMP,KAAK,UADX,SAGAJ,EAAAC,EAAAC,cAACU,EAAA,EAAKI,KAAN,CAAWC,IAAI,UACfjB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMP,KAAK,aADX,yCCVKe,EArBQ,SAACtB,GAQtB,OACEG,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEC,WATS,CACX,6CACA,qCACA,8CACA,yCACA,uCAKEC,WAAY,SAAAC,GAAI,OACdvB,EAAAC,EAAAC,cAACkB,EAAA,EAAKJ,KAAN,KACGO,OCkCIC,EA7CS,SAAC3B,GAAU,IACzB4B,EAAUC,IAAVD,MACFE,EAAO,CACX,CACET,MAAO,sBAET,CACEA,MAAO,SAET,CACEA,MAAO,uBAET,CACEA,MAAO,kBAET,CACEA,MAAO,cAsBX,OACElB,EAAAC,EAAAC,cAAA,WAnBAyB,EAAKC,IAAI,SAAAL,GAAI,OACXvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,KAAK,OAAOC,QAAQ,UACvBL,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBACbR,EAAAC,EAAAC,cAACuB,EAAD,CAAOI,MAAO,EAAGpB,MAAO,CAAEC,MAAO,UAC9Ba,EAAKL,SAIZlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,KAAK,OAAOC,QAAQ,UACvBL,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACbR,EAAAC,EAAAC,cAAC4B,EAAD,aCRGC,EAtBH,SAAClC,GAAU,IACbmC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAEzB,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAAC8B,EAAD,KACEhC,EAAAC,EAAAC,cAACoC,EAAD,QAGJtC,EAAAC,EAAAC,cAACgC,EAAD,CAASzB,MAAO,CAAE8B,UAAW,SAC3BvC,EAAAC,EAAAC,cAACsC,EAAD,OAEFxC,EAAAC,EAAAC,cAACiC,EAAD,CAAQ1B,MAAQ,CAAEgC,UAAW,WAA7B,+CCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.af99b119.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navigation.css';\r\nimport { Row, Col, Menu, Icon } from 'antd';\r\n\r\nconst Navigation = (props) => {\r\n  const { SubMenu } = Menu;\r\n  return (\r\n    <Row type=\"flex\" justify=\"space-between\">\r\n      <Col span={8}>\r\n        <span className=\".logo\">\r\n          <h1 style={ { color:\"rgba(255, 255, 255, 0.65)\" } }>\r\n            <Icon type=\"frown\" style={ { color:\"rgba(255, 255, 255, 0.65)\" } }/> The Forum\r\n          </h1>\r\n        </span>    \r\n      </Col>\r\n      <Col span={6}>\r\n        <Menu defaultSelectedKeys={['Home']} mode=\"horizontal\" theme=\"dark\" className=\"menu\">\r\n          <Menu.Item \r\n            key=\"Home\">\r\n            <Icon type=\"home\" />Home\r\n          </Menu.Item>\r\n          <SubMenu title={\r\n            <span>\r\n              <Icon type=\"bars\" /> Forum\r\n            </span>\r\n          }>\r\n            <Menu.Item key=\"Forum:1\">Forum 1</Menu.Item>\r\n            <Menu.Item key=\"Forum:2\">Forum 2</Menu.Item>\r\n            <Menu.Item key=\"Forum:3\">Forum 3</Menu.Item>\r\n            <Menu.Item key=\"Forum:4\">Forum 4</Menu.Item>\r\n          </SubMenu>\r\n          <Menu.Item key=\"Login\">\r\n          <Icon type=\"login\" />Login\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Signup\">\r\n          <Icon type=\"user-add\" />Signup\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { List } from 'antd';\r\n\r\nconst HomeForumPosts = (props) => {\r\n  const data = [\r\n    'Racing car sprays burning fuel into crowd.',\r\n    'Japanese princess to wed commoner.',\r\n    'Australian walks 100km after outback crash.',\r\n    'Man charged over missing wedding girl.',\r\n    'Los Angeles battles huge wildfires.',\r\n  ];\r\n  return (\r\n    <List\r\n      dataSource={data}\r\n      renderItem={item => (\r\n        <List.Item>\r\n          {item}\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\n\r\nexport default HomeForumPosts;\r\n","import React from 'react';\r\nimport './homeForumHeader.css';\r\nimport { Row, Typography } from 'antd';\r\nimport HomeForumPosts from './homeForumPosts';\r\n\r\nconst HomeForumHeader = (props) => {\r\n  const { Title } = Typography;\r\n  const data = [\r\n    {\r\n      title: 'General Discussion',\r\n    },\r\n    {\r\n      title: 'Memes',\r\n    },\r\n    {\r\n      title: 'Crying Cat Pictures',\r\n    },\r\n    {\r\n      title: 'Morbid Reality',\r\n    },\r\n    {\r\n      title: 'Off Topic',\r\n    },\r\n  ];\r\n  const displayForums = () => (\r\n    data.map(item => (\r\n      <div>\r\n        <Row type=\"flex\" justify=\"center\">\r\n          <div className=\"header-container\">\r\n            <Title level={3} style={{ color: 'white' }}>\r\n              {item.title}\r\n            </Title>\r\n          </div>\r\n        </Row>\r\n        <Row type=\"flex\" justify=\"center\">\r\n          <div className=\"post-container\">\r\n            <HomeForumPosts/>\r\n          </div>\r\n          \r\n        </Row>\r\n      </div>\r\n    ))\r\n  )\r\n  return (\r\n    <div>\r\n      {displayForums()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomeForumHeader;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Layout, Affix } from 'antd';\r\nimport Navigation from './components/navigation';\r\nimport HomeForumHeader from './components/homeForumHeader';\r\n\r\nconst App = (props) => {\r\n  const { Header, Content, Footer } = Layout;\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <Affix>\r\n          <Header>\r\n            <Navigation />\r\n          </Header>\r\n        </Affix>\r\n        <Content style={{ marginTop: '64px'}}>\r\n          <HomeForumHeader/>\r\n        </Content>\r\n        <Footer style= {{ textAlign: 'center' }}>\r\n        Forum Â©2019 Created by Jeremey & Kyle\r\n        </Footer>\r\n      </Layout>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}